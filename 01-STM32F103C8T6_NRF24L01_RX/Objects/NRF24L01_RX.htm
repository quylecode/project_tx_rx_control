<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\NRF24L01_RX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\NRF24L01_RX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Wed Jun  7 23:30:09 2023
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LVQ_NRF24_TXSearchChannel &rArr; LVQ_NRF24_ReadPayload &rArr; LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[47]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[45]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from delay_systick.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[af]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[43]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LVQ_NRF24_TXSearchChannel &rArr; LVQ_NRF24_ReadPayload &rArr; LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[42]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[44]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_HandleData
</UL>

<P><STRONG><a name="[c6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[41]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Delay_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, delay_systick.o(.text.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_Init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay_systick.o(.text.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[4c]"></a>Flash_Erase</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flash.o(.text.Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Unclock
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>Flash_Read</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, flash.o(.text.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Flash_Unclock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flash.o(.text.Flash_Unclock))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[4e]"></a>Flash_Write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, flash.o(.text.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Unclock
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>GPIO_Init</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM4Pins
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM3Pins
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM2Pins
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM1Pins
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Config
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM3Pins
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM2Pins
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI1_INT_InitPins
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LVQ_GPIO_Config</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lvq_stm32f1_gpio.o(.text.LVQ_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
</UL>

<P><STRONG><a name="[51]"></a>LVQ_GPIO_EnableClock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lvq_stm32f1_gpio.o(.text.LVQ_GPIO_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVQ_GPIO_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
</UL>

<P><STRONG><a name="[53]"></a>LVQ_GPIO_Init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lvq_stm32f1_gpio.o(.text.LVQ_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_EnableClock
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI2_INT_InitPins
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI1_INT_InitPins
</UL>

<P><STRONG><a name="[54]"></a>LVQ_NRF24_Check</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LVQ_NRF24_Check &rArr; LVQ_NRF24_WriteMBReg
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteMBReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadMBReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>LVQ_NRF24_ClearIRQFlags</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ClearIRQFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_ClearIRQFlags &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
</UL>

<P><STRONG><a name="[5a]"></a>LVQ_NRF24_DisableAA</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_DisableAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_DisableAA &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[5b]"></a>LVQ_NRF24_FlushRX</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_FlushRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayloadGeneric
</UL>

<P><STRONG><a name="[5c]"></a>LVQ_NRF24_FlushTX</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_FlushTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_FlushTX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpTx
</UL>

<P><STRONG><a name="[61]"></a>LVQ_NRF24_GetStatus</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_GetStatus &rArr; LVQ_NRF24_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
</UL>

<P><STRONG><a name="[62]"></a>LVQ_NRF24_GetStatus_RXFIFO</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_GetStatus_RXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_GetStatus_RXFIFO &rArr; LVQ_NRF24_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
</UL>

<P><STRONG><a name="[63]"></a>LVQ_NRF24_HandleData</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LVQ_NRF24_HandleData &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>LVQ_NRF24_Init</STRONG> (Thumb, 886 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = LVQ_NRF24_Init &rArr; LVQ_SPI_Init &rArr; LVQ_SPIx_Init &rArr; LVQ_SPI2_INT_InitPins &rArr; LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushTX
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushRX
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_L
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>LVQ_NRF24_PowerUpRx</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_PowerUpRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LVQ_NRF24_PowerUpRx &rArr; LVQ_NRF24_ClearIRQFlags &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetOperationalMode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushRX
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_L
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_H
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
</UL>

<P><STRONG><a name="[6b]"></a>LVQ_NRF24_PowerUpTx</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_PowerUpTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LVQ_NRF24_PowerUpTx &rArr; LVQ_NRF24_ClearIRQFlags &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetOperationalMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushTX
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_L
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
</UL>

<P><STRONG><a name="[6d]"></a>LVQ_NRF24_ReadPayload</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ReadPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LVQ_NRF24_ReadPayload &rArr; LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayloadGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
</UL>

<P><STRONG><a name="[6f]"></a>LVQ_NRF24_ResetPLOS</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ResetPLOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_ResetPLOS &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>LVQ_NRF24_SetAddress</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetAddress &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[71]"></a>LVQ_NRF24_SetAddressWidth</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetAddressWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_SetAddressWidth &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[72]"></a>LVQ_NRF24_SetCRCScheme</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetCRCScheme))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetCRCScheme &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[73]"></a>LVQ_NRF24_SetDataRate</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetDataRate &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[69]"></a>LVQ_NRF24_SetOperationalMode</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetOperationalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetOperationalMode &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
</UL>

<P><STRONG><a name="[74]"></a>LVQ_NRF24_SetPowerMode</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetPowerMode &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[75]"></a>LVQ_NRF24_SetRFChannel</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetRFChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LVQ_NRF24_SetRFChannel &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[76]"></a>LVQ_NRF24_SetRXPipe</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetRXPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetRXPipe &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[77]"></a>LVQ_NRF24_SetTXPower</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_SetTXPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LVQ_NRF24_SetTXPower &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
</UL>

<P><STRONG><a name="[78]"></a>LVQ_NRF24_StartRXMode</STRONG> (Thumb, 660 bytes, Stack size 160 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_StartRXMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LVQ_NRF24_StartRXMode &rArr; LVQ_NRF24_SetTXPower &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetTXPower
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRXPipe
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRFChannel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetPowerMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetOperationalMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetDataRate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetCRCScheme
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddressWidth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_DisableAA
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_H
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>LVQ_NRF24_TXSearchChannel</STRONG> (Thumb, 788 bytes, Stack size 112 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_TXSearchChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LVQ_NRF24_TXSearchChannel &rArr; LVQ_NRF24_ReadPayload &rArr; LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayload
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetStatus_RXFIFO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRXPipe
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRFChannel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetPowerMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>LVQ_NRF24_TransmitPacket</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LVQ_NRF24_TransmitPacket &rArr; LVQ_NRF24_ClearIRQFlags &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WritePayload
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushTX
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_L
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CE_H
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
</UL>

<P><STRONG><a name="[7c]"></a>LVQ_NRF24_WritePayload</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_WritePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LVQ_NRF24_WritePayload &rArr; LVQ_NRF24_WriteMBReg
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteMBReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
</UL>

<P><STRONG><a name="[7d]"></a>LVQ_SPI1_INT_InitPins</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lvq_stm32f1_spi.o(.text.LVQ_SPI1_INT_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LVQ_SPI1_INT_InitPins &rArr; LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>

<P><STRONG><a name="[7f]"></a>LVQ_SPI2_INT_InitPins</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvq_stm32f1_spi.o(.text.LVQ_SPI2_INT_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LVQ_SPI2_INT_InitPins &rArr; LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>

<P><STRONG><a name="[66]"></a>LVQ_SPI_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lvq_stm32f1_spi.o(.text.LVQ_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LVQ_SPI_Init &rArr; LVQ_SPIx_Init &rArr; LVQ_SPI2_INT_InitPins &rArr; LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
</UL>

<P><STRONG><a name="[84]"></a>LVQ_UpdatePWM</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, main.o(.text.LVQ_UpdatePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LVQ_UpdatePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>PWM_INT_InitTIM1Pins</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, pwm.o(.text.PWM_INT_InitTIM1Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_INT_InitTIM1Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
</UL>

<P><STRONG><a name="[87]"></a>PWM_INT_InitTIM2Pins</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, pwm.o(.text.PWM_INT_InitTIM2Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_INT_InitTIM2Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
</UL>

<P><STRONG><a name="[88]"></a>PWM_INT_InitTIM3Pins</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, pwm.o(.text.PWM_INT_InitTIM3Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PWM_INT_InitTIM3Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
</UL>

<P><STRONG><a name="[89]"></a>PWM_INT_InitTIM4Pins</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, pwm.o(.text.PWM_INT_InitTIM4Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_INT_InitTIM4Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
</UL>

<P><STRONG><a name="[8a]"></a>PWM_Init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PWM_Init &rArr; PWM_InitChannel &rArr; PWM_INT_InitTIM3Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>PWM_InitChannel</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, pwm.o(.text.PWM_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PWM_InitChannel &rArr; PWM_INT_InitTIM3Pins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM4Pins
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM3Pins
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM2Pins
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM1Pins
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[85]"></a>PWM_Set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(.text.PWM_Set))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_UpdatePWM
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitChannel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM4Pins
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM3Pins
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM2Pins
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_INT_InitTIM1Pins
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_EnableClock
</UL>

<P><STRONG><a name="[83]"></a>SPI_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>

<P><STRONG><a name="[81]"></a>SPI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPIx_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay_systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>SystemInitDefine</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(.text.SystemInitDefine))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[91]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[90]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[8d]"></a>TIM_OC</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pwm.o(.text.TIM_OC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_OC &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[97]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[98]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[99]"></a>TIM_OC2Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[9a]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[9b]"></a>TIM_OC3Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[9c]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[9d]"></a>TIM_OC4Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[9e]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC
</UL>

<P><STRONG><a name="[92]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>

<P><STRONG><a name="[95]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>

<P><STRONG><a name="[93]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>

<P><STRONG><a name="[94]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>

<P><STRONG><a name="[8c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[a2]"></a>Timer_read_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay_systick.o(.text.Timer_read_ms))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Timer_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay_systick.o(.text.Timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 1350 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; LVQ_NRF24_TXSearchChannel &rArr; LVQ_NRF24_ReadPayload &rArr; LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_read_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitDefine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_UpdatePWM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TXSearchChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ResetPLOS
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayload
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_HandleData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetStatus_RXFIFO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Check
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_GPIO_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4b]"></a>NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay_systick.o(.text.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[4a]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, delay_systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[8e]"></a>TIM1_OC</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pwm.o(.text.TIM1_OC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_OC &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[80]"></a>LVQ_SPIx_Init</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, lvq_stm32f1_spi.o(.text.LVQ_SPIx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LVQ_SPIx_Init &rArr; LVQ_SPI2_INT_InitPins &rArr; LVQ_GPIO_Init &rArr; LVQ_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI2_INT_InitPins
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI1_INT_InitPins
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI_Init
</UL>

<P><STRONG><a name="[6a]"></a>LVQ_NRF24_CE_H</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_CE_H))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_StartRXMode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
</UL>

<P><STRONG><a name="[67]"></a>LVQ_NRF24_CE_L</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_CE_L))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_TransmitPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_PowerUpRx
</UL>

<P><STRONG><a name="[60]"></a>LVQ_NRF24_CSN_H</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_CSN_H))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteMBReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadMBReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetRxDplPayloadWidth
</UL>

<P><STRONG><a name="[5e]"></a>LVQ_NRF24_CSN_L</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_CSN_L))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteMBReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadMBReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetRxDplPayloadWidth
</UL>

<P><STRONG><a name="[5d]"></a>LVQ_NRF24_GetRxDplPayloadWidth</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_GetRxDplPayloadWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVQ_NRF24_GetRxDplPayloadWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayloadGeneric
</UL>

<P><STRONG><a name="[5f]"></a>LVQ_NRF24_RW</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_RW))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteReg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WriteMBReg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadMBReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetRxDplPayloadWidth
</UL>

<P><STRONG><a name="[56]"></a>LVQ_NRF24_ReadMBReg</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ReadMBReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVQ_NRF24_ReadMBReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayloadGeneric
</UL>

<P><STRONG><a name="[6e]"></a>LVQ_NRF24_ReadPayloadGeneric</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ReadPayloadGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LVQ_NRF24_ReadPayloadGeneric &rArr; LVQ_NRF24_FlushRX &rArr; LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushRX
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadMBReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetRxDplPayloadWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayload
</UL>

<P><STRONG><a name="[58]"></a>LVQ_NRF24_ReadReg</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVQ_NRF24_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ResetPLOS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetStatus_RXFIFO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetTXPower
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRXPipe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetPowerMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetOperationalMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetDataRate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetCRCScheme
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_GetStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_DisableAA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ReadPayloadGeneric
</UL>

<P><STRONG><a name="[55]"></a>LVQ_NRF24_WriteMBReg</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_WriteMBReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVQ_NRF24_WriteMBReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_WritePayload
</UL>

<P><STRONG><a name="[59]"></a>LVQ_NRF24_WriteReg</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_NRF24_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVQ_NRF24_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_L
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_CSN_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ResetPLOS
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_ClearIRQFlags
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetTXPower
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRXPipe
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetRFChannel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetPowerMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetOperationalMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetDataRate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetCRCScheme
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddressWidth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_SetAddress
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushTX
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_FlushRX
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_DisableAA
</UL>

<P><STRONG><a name="[6c]"></a>LVQ_SPI_Send</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lvq_stm32f1_nrf24.o(.text.LVQ_SPI_Send))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVQ_NRF24_RW
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
